@inherits TestContext

@code {

    [Fact]
    public void HtmlPasswordBox_UsingAttributes_ShouldRender()
    {
        // Arrange
        const string headerText = "Header Text";
        const string description = "Description";
        var value = "password";

        // Act
        var output = Render(@<HtmlPasswordBox HeaderText="@headerText" DescriptionText="@description" @bind-Value="@value"></HtmlPasswordBox>);

        // Assert
        output.MarkupMatches(
            @<div class="password-box">
                <label class="password-box-header" for:ignore>@headerText</label>
                <input type="password" id:ignore class="password-box-input" value="@value">
                <div class="password-box-description">@description</div>
            </div>
            );
    }

    [Fact]
    public void HtmlPasswordBox_UsingChildContent_ShouldRender()
    {
        // Arrange
        const string headerText = "Header Text";
        const string description = "Description";
        var value = "password";

        // Act
        var output = Render(
            @<HtmlPasswordBox @bind-Value="@value">
                <Header>
                    <label>@headerText</label>
                </Header>
                <Description>
                    <div>@description</div>
                </Description>
            </HtmlPasswordBox>
            );

        // Assert
        output.MarkupMatches(
            @<div class="password-box">
                <label>@headerText</label>
                <input type="password" id:ignore class="password-box-input" value="@value">
                <div>@description</div>
            </div>
            );
    }

    [Fact]
    public void HtmlPasswordBox_WithMinAndMax_ShouldRenderAttributes()
    {
        // Arrange
        var value = "password";
        const int minLength = 5;
        const int maxLength = 20;

        // Act
        var input = Render(@<HtmlPasswordBox @bind-Value="@value" MinLength="@minLength" MaxLength="@maxLength"></HtmlPasswordBox>).Find(HtmlElements.Input);

        // Assert
        Assert.Equal(minLength.ToString(), input.Attributes.GetNamedItem(HtmlAttributes.MinLength)?.Value);
        Assert.Equal(maxLength.ToString(), input.Attributes.GetNamedItem(HtmlAttributes.MaxLength)?.Value);
    }

}
