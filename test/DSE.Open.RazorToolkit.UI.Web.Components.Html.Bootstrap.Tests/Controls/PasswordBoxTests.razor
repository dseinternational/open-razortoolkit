@inherits TestContext

@code {

    [Fact]
    public void PasswordBox_UsingAttributes_ShouldRender()
    {
        // Arrange
        const string headerText = "Header Text";
        const string description = "Description";
        var value = "password";

        // Act
        var output = Render(@<PasswordBox HeaderText="@headerText" DescriptionText="@description" @bind-Value="@value"></PasswordBox>);

        // Assert
        output.MarkupMatches(
            @<div class="password-box">
                <label class="form-label password-box-header" for:ignore>@headerText</label>
                <input type="password" id:ignore class="form-control password-box-input" value="@value">
                <div class="form-description password-box-description">@description</div>
            </div>
            );
    }

    [Fact]
    public void PasswordBox_UsingChildContent_ShouldRender()
    {
        // Arrange
        const string headerText = "Header Text";
        const string description = "Description";
        var value = "password";

        // Act
        var output = Render(
            @<PasswordBox @bind-Value="@value">
                <Header>
                    <label>@headerText</label>
                </Header>
                <Description>
                    <div>@description</div>
                </Description>
            </PasswordBox>
            );

        // Assert
        output.MarkupMatches(
            @<div class="password-box">
                <label>@headerText</label>
                <input type="password" id:ignore class="form-control password-box-input" value="@value">
                <div>@description</div>
            </div>
            );
    }

    [Fact]
    public void PasswordBox_WithPlainTextAndLarge_ShouldRenderClasses()
    {
        // Arrange
        var value = "password";

        // Act
        var input = Render(@<PasswordBox @bind-Value="@value" PlainText ControlSize="BootstrapSize.Large"></PasswordBox>).Find(HtmlElements.Input);

        // Assert
        Assert.Contains(BootstrapClasses.FormControlPlaintext, input.ClassList);
        Assert.Contains(BootstrapClasses.FormControlLg, input.ClassList);
        Assert.DoesNotContain(BootstrapClasses.FormControl, input.ClassList);
    }

}
